{"version":3,"sources":["../node_modules/natural/lib/natural/sentiment sync","../node_modules/module-available sync","../node_modules/colors/lib sync","../node_modules/neural-chatbot/source/boteng sync","Chatbot.js","BasicTerm.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","conf","database","exampleWildcards","fileDatabase","user","doc","description","name","phraseTable","result","a","async","bot","BasicBot","initialize","userData","UserData","BotTerm","props","state","value","list","response","textInput","React","createRef","focus","bind","this","current","text","color","botColor","symbol","botSymbol","userColor","userSymbol","func","setState","push","input","addTextClear","startMessage","computeBotText","then","ans","console","log","addText","finishedLoadingMessage","event","target","preventDefault","inputValue","computeUserText","getResult","autoComplete","onSubmit","handleSubmit","style","backgroundColor","border","fontSize","map","val","key","borderColor","display","ref","autoFocus","type","onChange","handleChange","outline","Component","defaultProps","App","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.020b4ba3.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 196;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 229;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 317;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 519;","import { BasicBot } from 'neural-chatbot';\nimport { UserData } from 'neural-phrasex';\n\nlet db = {\n  \"data\": [\n    {\n      exampleWildcards : {},\n      \"phrase\": [\"What is your name\"],\n      \"response\": [\"My name is Bot\"],\n      \"phraseType\": \"job\",\n      \"implies\": [\n        \"whatIsYourName\"\n      ],\n      \"target\": [\n      ],\n      \"meta\": {\n        \"style\": [\n          \"nosearch\"\n        ],\n        \"group\": \"name\"\n      }\n    },\n    {\n      exampleWildcards : {},\n      \"phrase\": [\"What do you do for a living\",\n        \"What is your job\", \"How do you make money\"],\n      \"response\": [\"I'm an engineer\", \"sometimes I work as a cook\"],\n      \"phraseType\": \"job\",\n      \"implies\": [\n        \"movie\"\n      ],\n      \"target\": [\n      ],\n      \"meta\": {\n        \"style\": [\n          \"nosearch\"\n        ],\n        \"group\": \"job\"\n      }\n    },\n    {\n      exampleWildcards : {},\n      \"phrase\": [\"What is your favorite movie\"],\n      \"response\": [\"Aliens\"],\n      \"phraseType\": \"favorite movie\",\n      \"implies\": [\n        \"movie\"\n      ],\n      \"target\": [\n      ],\n      \"meta\": {\n        \"style\": [\n          \"nosearch\"\n        ],\n        \"group\": \"movie\"\n      }\n    },\n    {\n      exampleWildcards : {},\n      \"phrase\": [\"You are smart\", \"You look nice\", \"you are good\",\n        \"DAMN\", \"this is great\", \"this is awesome\", \"this is fantastic\",\n        \"this rules\"],\n      \"response\": [\"thanks\", \"I know\", \"duhh\"],\n      \"phraseType\": \"compliment\",\n      \"implies\": [\n        \"compliment\"\n      ],\n      \"target\": [\n      ],\n      \"meta\": {\n        \"style\": [\n          \"nosearch\"\n        ],\n        \"group\": \"compliment\"\n      }\n    },\n    {\n      exampleWildcards : {},\n      \"phrase\": [\"do you have family?\", \"do you have any kids\", \"do you have any children\"],\n      \"response\": [\"I have 32 kids, they drive me nuts.\"],\n      \"phraseType\": \"family\",\n      \"implies\": [\n        \"family\"\n      ],\n      \"target\": [\n      ],\n      \"meta\": {\n        \"style\": [\n          \"nosearch\"\n        ],\n        \"group\": \"family\"\n      }\n    }]\n}\n\nlet conf = {\n  database: db,\n  fileDatabase: 'filesystem',\n  user: 'root',\n  doc: {\n    description: {\n      name: 'JLO',\n    },\n  },\n  phraseTable: 'dudephrases',\n}\n\nlet initialize = async() => {\n  let bot = new BasicBot()\n  await bot.initialize(conf)\n  let userData = new UserData()\n  userData.initialize()\n  return { bot, userData, conf }\n}\n\nexport default initialize","import React, { Component } from 'react';\nimport initialize from './Chatbot'\n\nlet result = initialize()\n\nclass BotTerm extends Component {\n\n  static defaultProps = {\n    backgroundColor : 'black',\n    botColor : 'green',\n    userColor : 'orange',\n    botSymbol : '',\n    userSymbol : '>',\n    startMessage : \"Hello, I'm starting up.  The whole thing runs client side so nothing you say is sent to external servers.\",\n    finishedLoadingMessage : \"Ok, I've finished loading my brain.  This is good. Yes this is a retro theme.\",\n    fontSize : \"large\"\n  }\n\n  constructor(props) {\n    super(props)\n    this.props = props\n    \n    this.state = {\n      value: \"\",\n      list: [],\n      response: ''\n    }\n\n    this.userData = null\n    this.bot = null\n\n    // create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n    this.focus = this.focus.bind(this);\n  }\n\n  focus() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  computeBotText(text) {\n    return { text: text, user : \"bot\", color : this.props.botColor, symbol : this.props.botSymbol }\n  }\n  computeUserText(text) {\n    return { text: text, user : \"user\", color : this.props.userColor, symbol : this.props.userSymbol }\n  }\n\n  async addText(text, func) {\n    await this.setState((state) => {\n      let list = state.list\n      list.push(func(text))\n      return { input: list}\n    })\n  }\n\n  async addTextClear(text, func) {\n    await this.setState((state) => {\n      let list = state.list\n      list.push(func(text))\n      return { input: list, value: '' }\n    })\n  }\n\n  componentDidMount() {\n    this.addTextClear(this.props.startMessage, this.computeBotText.bind(this))\n    result.then((ans) => {\n      this.userData = ans.userData\n      this.bot = ans.bot\n      this.conf = ans.conf\n      console.log('ans.conf',ans.conf)\n      this.addText(this.props.finishedLoadingMessage, this.computeBotText.bind(this))\n    })\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault()\n    // this.setState({title : event.target.value})\n    // value needs to be copied before being used in setState\n    console.log('event.target', event.target)\n    let inputValue = this.state.value\n    console.log('this.state', this.state)\n\n    this.addTextClear(inputValue, this.computeUserText.bind(this))\n\n    if(this.bot) {\n      try {\n      let ans = await this.bot.getResult(inputValue, this.userData)\n      this.addTextClear(ans.response, this.computeBotText.bind(this))\n      console.log('ans',ans.response)\n      } catch(error) {\n        console.log('error', error)\n      }\n      return 'Testing'\n    }\n  }\n\n  render() {\n    return (<form id=\"mainForm\" autoComplete=\"off\" onSubmit={this.handleSubmit.bind(this)} style={{backgroundColor: this.props.backgroundColor, border:'none', \"fontSize\" : this.props.fontSize}}>\n      {\n        this.state.list.map((val, id) => {\n          return <div key={id} style={{ color: val.color, borderColor: this.props.backgroundColor , border: 'none'}}>\n            {val.symbol + val.text}\n          </div>\n        })\n      }\n      <div style={{color: this.props.userColor, display: \"inline-block\", \"textAlign\": \"right\"}}>{this.props.userSymbol}</div>\n      <input ref={this.textInput} autoFocus type=\"text\" name=\"name\" value={this.state.value} onChange={this.handleChange.bind(this)} \n        style={{ \"fontSize\" : this.props.fontSize, backgroundColor: this.props.backgroundColor, color: this.props.userColor, border: \"none\", autoComplete:\"off\", outline:\"none\" }} />\n    </form>)\n  }\n}\n\nexport default BotTerm","import React from 'react';\nimport BotTerm from './BasicTerm';\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div style={{ margin: '2%' }}>\n      <BotTerm backgroundColor='black'></BotTerm>\n    </div>\n  );\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}